#+SETUPFILE: setup.org
#+TITLE: {{fqname}}

* About the project

** TODO Overview

{{desc}}

** TODO Status

** TODO Example usage

#+BEGIN_SRC clojure
  (require '{{ns-root}}.core)

  ;; TODO some magic
#+END_SRC

** License

This project is open source and licensed under the [[{{license-url}}][{{license-name}}]].

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :exports none :noweb-ref version
0.1.0-SNAPSHOT
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref project-url
{{url}}
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/{{name}}-<<version>>.js
#+END_SRC

** Dependencies

*** Runtime

**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.6.0"]
#+END_SRC

**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-2665"]
#+END_SRC

*** Development

**** [[https://github.com/lynaghk/cljx][Cljx]]
#+BEGIN_SRC clojure :noweb-ref dep-cljx
[com.keminglabs/cljx "0.5.0"]
#+END_SRC

**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.3"]
#+END_SRC

**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC

**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.4"]
#+END_SRC

** Contributors

| *Name*     | *Role*                          | *Website*      |
|------------+---------------------------------+----------------|
| [[{{email}}][{{author}}]] | initiator & principal developer | {{author-url}} |

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*     | *Tagged Github URL* |
|-----------+------------+--------------------+------------------------+---------------------|
|     0.1.0 | pending    | 1st public release | =[{{fqname}} "0.1.0"]= |                     |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [{{fqname}} <<version>>]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in [[https://github.com/lynaghk/cljx][CLJX]] form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/{{group}}/{{name}}.git
  cd {{name}}
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(={{target}}=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd {{target}}
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (={{target}}/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Since the generated =project.clj= (see below) includes REPL hooks for
CLJX, editing files in Org-mode, then re-loading & testing changes is
quite trivial. Simply launch a REPL (via =lein= or Emacs) as usual.
Everytime you've made changes to an =.org= file, re-tangle it from
Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace in the
REPL via =(require '{{ns-root}}... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../{{tangle-target}}project.clj :noweb yes {{tangle-mkdirp}}:padline no
  (defproject {{fqname}} "<<version>>"
    :description  "{{desc}}"
    :url          "<<project-url>>"
    :license      {:name "{{license-name}}"
                   :url "{{license-url}}"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "https://github.com/"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>]

    :source-paths ["src/cljx"]
    :test-paths   ["<<gen-test-path>>"]

    :profiles     {:dev {:dependencies [<<dep-cljs>>
                                        <<dep-criterium>>]
                         :plugins [<<dep-cljx>>
                                   <<dep-cljsbuild>>
                                   <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :auto-clean false
                         :prep-tasks [["cljx" "once"]]
                         :aliases {"cleantest" ["do" "clean," "cljx" "once," "test," "cljsbuild" "test"]}}}

    :cljx         {:builds [{:source-paths ["src/cljx"]
                             :output-path "<<gen-source-path>>"
                             :rules :clj}
                            {:source-paths ["src/cljx"]
                             :output-path "<<gen-source-path>>"
                             :rules :cljs}
                            {:source-paths ["test/cljx"]
                             :output-path "<<gen-test-path>>"
                             :rules :clj}
                            {:source-paths ["test/cljx"]
                             :output-path "<<gen-test-path>>"
                             :rules :cljs}]}

    :cljsbuild    {:builds [{:source-paths ["<<gen-source-path>>" "<<gen-test-path>>"]
                             :id "dev"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}
                            {:source-paths ["<<gen-source-path>>" "<<gen-test-path>>"]
                             :id "prod"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :advanced
                                        :pretty-print false}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "{{author}}"]
                                [:url "{{author-url}}"]
                                [:timezone "{{tzone}}"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../{{tangle-target}}index.html :noweb yes {{tangle-mkdirp}}:padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace ={{ns-root}}.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[{{ns-root}}.version])
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../{{tangle-target}}src/cljx/{{ns-root-path}}/version.cljx :noweb yes {{tangle-mkdirp}}:padline no :exports none
  (ns {{ns-root}}.version)

  (def version "<<version>>")
#+END_SRC

* Modules

** Core API

- [[core.org][{{ns-root}}.core]]

* Tests

- [[../test/core.org][{{ns-root}}.test.core]]

